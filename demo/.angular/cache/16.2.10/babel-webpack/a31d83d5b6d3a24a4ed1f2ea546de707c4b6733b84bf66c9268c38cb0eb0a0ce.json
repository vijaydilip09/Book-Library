{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseURL = \"http://localhost:8080/api/v1/books\";\n  }\n  getBooksList() {\n    return this.httpClient.get(`${this.baseURL}`);\n  }\n  createBook(book) {\n    return this.httpClient.post(`${this.baseURL}`, book);\n  }\n  getBookById(id) {\n    return this.httpClient.get(`${this.baseURL}/${id}`);\n  }\n  updateBook(id, book) {\n    return this.httpClient.put(`${this.baseURL}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.httpClient.delete(`${this.baseURL}/${id}`);\n  }\n  load(filter) {\n    this.find(filter).subscribe(result => {\n      this.flightList = result;\n    }, err => {\n      console.error('error loading', err);\n    });\n  }\n  static #_ = this.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BookService","constructor","httpClient","baseURL","getBooksList","get","createBook","book","post","getBookById","id","updateBook","put","deleteBook","delete","load","filter","find","subscribe","result","flightList","err","console","error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Dilip\\Desktop\\angular-crud-main\\demo\\src\\app\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BookFilter } from './book-filter';\n\nimport { Book } from './book';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  private baseURL=\"http://localhost:8080/api/v1/books\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  getBooksList(): Observable<Book[]>{\n    return this.httpClient.get<Book[]>(`${this.baseURL}`);\n  }\n\n  createBook(book: Book): Observable<Object>{\n    return this.httpClient.post(`${this.baseURL}`, book);\n  }\n\n  getBookById(id: number): Observable<Book>{\n    return this.httpClient.get<Book>(`${this.baseURL}/${id}`);\n  }\n\n  updateBook(id: number, book: Book): Observable<Object>{\n    return this.httpClient.put(`${this.baseURL}/${id}`, book);\n  }\n\n  deleteBook(id: number): Observable<Object>{\n    return this.httpClient.delete(`${this.baseURL}/${id}`);\n  }\n  load(filter: BookFilter): void {\n    this.find(filter).subscribe(result => {\n        this.flightList = result;\n      },\n      err => {\n        console.error('error loading', err);\n      }\n    );\n  }\n}\n\n\n"],"mappings":";;AAWA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,OAAO,GAAC,oCAAoC;EAEN;EAE9CC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,OAAO,EAAE,CAAC;EACvD;EAEAG,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACL,UAAU,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,EAAE,EAAEI,IAAI,CAAC;EACtD;EAEAE,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACR,UAAU,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC3D;EAEAC,UAAUA,CAACD,EAAU,EAAEH,IAAU;IAC/B,OAAO,IAAI,CAACL,UAAU,CAACU,GAAG,CAAC,GAAG,IAAI,CAACT,OAAO,IAAIO,EAAE,EAAE,EAAEH,IAAI,CAAC;EAC3D;EAEAM,UAAUA,CAACH,EAAU;IACnB,OAAO,IAAI,CAACR,UAAU,CAACY,MAAM,CAAC,GAAG,IAAI,CAACX,OAAO,IAAIO,EAAE,EAAE,CAAC;EACxD;EACAK,IAAIA,CAACC,MAAkB;IACrB,IAAI,CAACC,IAAI,CAACD,MAAM,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MACjC,IAAI,CAACC,UAAU,GAAGD,MAAM;IAC1B,CAAC,EACDE,GAAG,IAAG;MACJC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,GAAG,CAAC;IACrC,CAAC,CACF;EACH;EAAC,QAAAG,CAAA,G;qBAhCUxB,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX7B,WAAW;IAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}