{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.BookList = [];\n    this.baseURL = \"http://localhost:8080/api/v1/books\";\n  }\n  getBooksList() {\n    return this.httpClient.get(`${this.baseURL}`);\n  }\n  createBook(book) {\n    return this.httpClient.post(`${this.baseURL}`, book);\n  }\n  getBookById(id) {\n    return this.httpClient.get(`${this.baseURL}/${id}`);\n  }\n  getBookByMethods(criteria) {\n    let params = new HttpParams();\n    if (criteria.id) {\n      params = params.set('id', criteria.id.toString());\n    }\n    if (criteria.author) {\n      params = params.set('author', criteria.author);\n    }\n    if (criteria.title) {\n      params = params.set('title', criteria.title);\n    }\n    return this.httpClient.get(`${this.baseURL}/search`, {\n      params\n    });\n  }\n  // Make the HTTP request with the constructed query parameters\n  updateBook(id, book) {\n    return this.httpClient.put(`${this.baseURL}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.httpClient.delete(`${this.baseURL}/${id}`);\n  }\n  searchBookById(id) {\n    return this.httpClient.get(`${this.baseURL}/${id}`);\n  }\n  //   searchBooks(searchParams: { id?: number; author?: string; title?: string }): Observable<Book> {\n  //     const params = new HttpParams({ fromObject: searchParams });\n  //     return this.httpClient.get<Book>(`${this.baseURL}/search`, { params });\n  // }\n  searchBooks(searchParams) {\n    const params = new HttpParams({\n      fromObject: searchParams\n    });\n    return this.httpClient.get(`${this.baseURL}/search`, {\n      params\n    });\n  }\n  static #_ = this.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","BookService","constructor","httpClient","BookList","baseURL","getBooksList","get","createBook","book","post","getBookById","id","getBookByMethods","criteria","params","set","toString","author","title","updateBook","put","deleteBook","delete","searchBookById","searchBooks","searchParams","fromObject","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Dilip\\Desktop\\angular-crud-main\\demo\\src\\app\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BookFilter } from './book-filter';\n\nimport { Book } from './book';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  BookList: Book[] = [];\n\n\n  private baseURL=\"http://localhost:8080/api/v1/books\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  \n\n  getBooksList(): Observable<Book[]>{\n    return this.httpClient.get<Book[]>(`${this.baseURL}`);\n  }\n\n  createBook(book: Book): Observable<Object>{\n    return this.httpClient.post(`${this.baseURL}`, book);\n  }\n\n  getBookById(id: number): Observable<Book>{\n    return this.httpClient.get<Book>(`${this.baseURL}/${id}`);\n  }\n\n  getBookByMethods(criteria: { id?: number; author?: string; title?: string }): Observable<Book> {\n      let params = new HttpParams();\n  \n      if (criteria.id) {\n        params = params.set('id', criteria.id.toString());\n      }\n      if (criteria.author) {\n        params = params.set('author', criteria.author);\n      }\n      if (criteria.title) {\n        params = params.set('title', criteria.title);\n      }\n  \n      return this.httpClient.get<Book>(`${this.baseURL}/search`, { params });\n    }\n    \n    // Make the HTTP request with the constructed query parameters\n\n\n\n  updateBook(id: number, book: Book): Observable<Object>{\n    return this.httpClient.put(`${this.baseURL}/${id}`, book);\n  }\n\n  deleteBook(id: number): Observable<Object>{\n    return this.httpClient.delete(`${this.baseURL}/${id}`);\n  }\n\n  searchBookById(id: number): Observable<Book> {\n    return this.httpClient.get<Book>(`${this.baseURL}/${id}`);\n  }\n\n//   searchBooks(searchParams: { id?: number; author?: string; title?: string }): Observable<Book> {\n//     const params = new HttpParams({ fromObject: searchParams });\n//     return this.httpClient.get<Book>(`${this.baseURL}/search`, { params });\n// }\nsearchBooks(searchParams: { id?: number | string; author?: string; title?: string }): Observable<Book[]> {\n  const params = new HttpParams({ fromObject: searchParams });\n  return this.httpClient.get<Book[]>(`${this.baseURL}/search`, { params });\n}\n\n\n\n}\n\n\n"],"mappings":"AAKA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAL9B,KAAAC,QAAQ,GAAW,EAAE;IAGb,KAAAC,OAAO,GAAC,oCAAoC;EAEN;EAI9CC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CAAS,GAAG,IAAI,CAACF,OAAO,EAAE,CAAC;EACvD;EAEAG,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACN,UAAU,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,EAAE,EAAEI,IAAI,CAAC;EACtD;EAEAE,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACT,UAAU,CAACI,GAAG,CAAO,GAAG,IAAI,CAACF,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC3D;EAEAC,gBAAgBA,CAACC,QAA0D;IACvE,IAAIC,MAAM,GAAG,IAAIf,UAAU,EAAE;IAE7B,IAAIc,QAAQ,CAACF,EAAE,EAAE;MACfG,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,IAAI,EAAEF,QAAQ,CAACF,EAAE,CAACK,QAAQ,EAAE,CAAC;;IAEnD,IAAIH,QAAQ,CAACI,MAAM,EAAE;MACnBH,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,QAAQ,EAAEF,QAAQ,CAACI,MAAM,CAAC;;IAEhD,IAAIJ,QAAQ,CAACK,KAAK,EAAE;MAClBJ,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,OAAO,EAAEF,QAAQ,CAACK,KAAK,CAAC;;IAG9C,OAAO,IAAI,CAAChB,UAAU,CAACI,GAAG,CAAO,GAAG,IAAI,CAACF,OAAO,SAAS,EAAE;MAAEU;IAAM,CAAE,CAAC;EACxE;EAEA;EAIFK,UAAUA,CAACR,EAAU,EAAEH,IAAU;IAC/B,OAAO,IAAI,CAACN,UAAU,CAACkB,GAAG,CAAC,GAAG,IAAI,CAAChB,OAAO,IAAIO,EAAE,EAAE,EAAEH,IAAI,CAAC;EAC3D;EAEAa,UAAUA,CAACV,EAAU;IACnB,OAAO,IAAI,CAACT,UAAU,CAACoB,MAAM,CAAC,GAAG,IAAI,CAAClB,OAAO,IAAIO,EAAE,EAAE,CAAC;EACxD;EAEAY,cAAcA,CAACZ,EAAU;IACvB,OAAO,IAAI,CAACT,UAAU,CAACI,GAAG,CAAO,GAAG,IAAI,CAACF,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC3D;EAEF;EACA;EACA;EACA;EACAa,WAAWA,CAACC,YAAuE;IACjF,MAAMX,MAAM,GAAG,IAAIf,UAAU,CAAC;MAAE2B,UAAU,EAAED;IAAY,CAAE,CAAC;IAC3D,OAAO,IAAI,CAACvB,UAAU,CAACI,GAAG,CAAS,GAAG,IAAI,CAACF,OAAO,SAAS,EAAE;MAAEU;IAAM,CAAE,CAAC;EAC1E;EAAC,QAAAa,CAAA,G;qBA7DY3B,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXhC,WAAW;IAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}