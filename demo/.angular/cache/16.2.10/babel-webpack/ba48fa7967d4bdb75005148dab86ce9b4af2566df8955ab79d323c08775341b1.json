{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BookFilter } from '../book-filter';\nlet BookListComponent = class BookListComponent {\n  // displayedColumns: string[] = ['id', 'bookTitle', 'authorName', 'publicationYear'];\n  // dataSource = new MatTableDataSource<Book>();\n  // ngAfterViewInit() {\n  //   this.dataSource.paginator = this.paginator;\n  // }\n  constructor(bookService, router) {\n    this.bookService = bookService;\n    this.router = router;\n    this.isAscending = true;\n    this.filter = new BookFilter();\n    this.currentPage = 1;\n    this.pageSize = 4;\n  }\n  ngOnInit() {\n    this.getBooks();\n    // this.search();\n  }\n\n  getBooks() {\n    this.bookService.getBooksList().subscribe(data => {\n      this.books = data;\n    });\n  }\n  sortTable(field) {\n    this.books.sort((a, b) => {\n      const aValue = a[field];\n      const bValue = b[field];\n      if (this.isAscending) {\n        return aValue - bValue;\n      } else {\n        return bValue - aValue;\n      }\n    });\n    this.isAscending = !this.isAscending;\n  }\n  // In your component class\n  paginatedBooks() {\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    const endIndex = startIndex + this.pageSize;\n    return this.books.slice(startIndex, endIndex);\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n    }\n  }\n  nextPage() {\n    const maxPage = Math.ceil(this.books.length / this.pageSize);\n    if (this.currentPage < maxPage) {\n      this.currentPage++;\n    }\n  }\n  bookDetails(id) {\n    this.router.navigate(['book-details', id]);\n  }\n  searchById() {\n    if (this.enteredId) {\n      this.bookService.getBookById(this.enteredId).subscribe(result => {\n        this.book = result;\n        console.log('Book found:', result);\n      }, error => {\n        console.error('Error fetching book:', error);\n        // this.book = null; // Reset book on error\n      });\n    }\n  }\n\n  searchByAuthor() {\n    if (this.enteredAuthor) {\n      this.bookService.searchBooksByAuthor(this.enteredAuthor).subscribe(result => {\n        this.book = result;\n        console.log('Books found:', result);\n      }, error => {\n        console.error('Error fetching books by author:', error);\n        // Handle error as needed\n      });\n    }\n  }\n  // searchById() {\n  //   if (this.enteredId || this.enteredAuthor || this.enteredBookName) {\n  //     this.bookService.getBookByMethods({\n  //       id: this.enteredId,\n  //       author: this.enteredAuthor,\n  //       title: this.enteredBookName\n  //     }).subscribe(\n  //       result => {\n  //         this.book = result;\n  //         console.log('Books found:', result);\n  //       },\n  //       error => {\n  //         console.error('Error fetching books:', error);\n  //         // this.books = null; // Reset books on error\n  //       }\n  //     );\n  //   }\n  // }\n  updateBook(id) {\n    this.router.navigate(['update-book', id]);\n    console.log('hello');\n  }\n  deleteBook(id) {\n    this.bookService.deleteBook(id).subscribe(data => {\n      console.log(data);\n      this.getBooks();\n    });\n  }\n};\nBookListComponent = __decorate([Component({\n  selector: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.css']\n})], BookListComponent);\nexport { BookListComponent };","map":{"version":3,"names":["Component","BookFilter","BookListComponent","constructor","bookService","router","isAscending","filter","currentPage","pageSize","ngOnInit","getBooks","getBooksList","subscribe","data","books","sortTable","field","sort","a","b","aValue","bValue","paginatedBooks","startIndex","endIndex","slice","previousPage","nextPage","maxPage","Math","ceil","length","bookDetails","id","navigate","searchById","enteredId","getBookById","result","book","console","log","error","searchByAuthor","enteredAuthor","searchBooksByAuthor","updateBook","deleteBook","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Dilip\\Desktop\\angular-crud-main\\demo\\src\\app\\book-list\\book-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Book } from '../book'\nimport { BookService } from '../book.service'\nimport { Router } from '@angular/router';\nimport { BookFilter } from '../book-filter';\n\n\n@Component({\n  selector: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.css']\n})\nexport class BookListComponent implements OnInit {\n  items: any[];\n  isAscending: boolean = true;\n\n  filter = new BookFilter();\n  book: Book;\n  books: any[];\n  enteredId: number;\n  enteredAuthor: string;\n  enteredBookName: string;\n\n  currentPage: number = 1;\n  pageSize: number = 4;\n\n  // displayedColumns: string[] = ['id', 'bookTitle', 'authorName', 'publicationYear'];\n  // dataSource = new MatTableDataSource<Book>();\n\n\n  // ngAfterViewInit() {\n  //   this.dataSource.paginator = this.paginator;\n  // }\n\n  constructor(private bookService: BookService,\n    private router: Router) { }\n\n  ngOnInit() {\n    this.getBooks();\n    // this.search();\n  }\n\n  private getBooks() {\n    this.bookService.getBooksList().subscribe(data => {\n      this.books = data;\n    });\n  }\n\n  sortTable(field: string) {\n    this.books.sort((a, b) => {\n      const aValue = a[field];\n      const bValue = b[field];\n      if (this.isAscending) {\n        return aValue - bValue;\n      } else {\n        return bValue - aValue;\n      }\n    });\n    this.isAscending = !this.isAscending;\n  }\n\n  // In your component class\n  paginatedBooks(): any[] {\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    const endIndex = startIndex + this.pageSize;\n    return this.books.slice(startIndex, endIndex);\n  }\n\n\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n    }\n  }\n\n  nextPage() {\n    const maxPage = Math.ceil(this.books.length / this.pageSize);\n    if (this.currentPage < maxPage) {\n      this.currentPage++;\n    }\n  }\n\n  bookDetails(id: number) {\n    this.router.navigate(['book-details', id]);\n  }\n\n    searchById() {\n   if (this.enteredId) {\n     this.bookService.getBookById(this.enteredId).subscribe(\n        result => {\n           this.book = result;\n           console.log('Book found:', result);\n         },\n         error => {\n           console.error('Error fetching book:', error);\n           // this.book = null; // Reset book on error\n         }\n       );\n     }\n   }\n\n   searchByAuthor() {\n    if (this.enteredAuthor) {\n      this.bookService.searchBooksByAuthor(this.enteredAuthor).subscribe(\n        result => {\n          this.book = result;\n          console.log('Books found:', result);\n        },\n        error => {\n          console.error('Error fetching books by author:', error);\n          // Handle error as needed\n        }\n      );\n    }\n  }\n\n  \n  // searchById() {\n  //   if (this.enteredId || this.enteredAuthor || this.enteredBookName) {\n  //     this.bookService.getBookByMethods({\n  //       id: this.enteredId,\n  //       author: this.enteredAuthor,\n  //       title: this.enteredBookName\n  //     }).subscribe(\n  //       result => {\n  //         this.book = result;\n  //         console.log('Books found:', result);\n  //       },\n  //       error => {\n  //         console.error('Error fetching books:', error);\n  //         // this.books = null; // Reset books on error\n  //       }\n  //     );\n  //   }\n  // }\n\n  updateBook(id: number) {\n    this.router.navigate(['update-book', id]);\n    console.log('hello');\n  }\n\n  deleteBook(id: number) {\n    this.bookService.deleteBook(id).subscribe(data => {\n      console.log(data);\n      this.getBooks();\n    })\n  }\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}