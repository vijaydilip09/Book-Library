{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  // constructor(private httpClient: HttpClient) { }\n  constructor(http) {\n    this.http = http;\n    this.BookList = [];\n    this.baseURL = \"http://localhost:8080/api/v1/books\";\n  }\n  getBooksList() {\n    return this.httpClient.get(`${this.baseURL}`);\n  }\n  createBook(book) {\n    return this.httpClient.post(`${this.baseURL}`, book);\n  }\n  getBookById(id) {\n    return this.httpClient.get(`${this.baseURL}/${id}`);\n  }\n  updateBook(id, book) {\n    return this.httpClient.put(`${this.baseURL}/${id}`, book);\n  }\n  deleteBook(id) {\n    return this.httpClient.delete(`${this.baseURL}/${id}`);\n  }\n  load(filter) {\n    this.find(filter).subscribe(result => {\n      this.BookList = result;\n    }, err => {\n      console.error('error loading', err);\n    });\n  }\n  find(filter) {\n    const url = `http://www.angular.at/api/flight`;\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    const params = {\n      'from': filter.from,\n      'to': filter.to\n    };\n    return this.http.get(url, {\n      params,\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BookService","constructor","http","BookList","baseURL","getBooksList","httpClient","get","createBook","book","post","getBookById","id","updateBook","put","deleteBook","delete","load","filter","find","subscribe","result","err","console","error","url","headers","set","params","from","to","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Dilip\\Desktop\\angular-crud-main\\demo\\src\\app\\book.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BookFilter } from './book-filter';\n\nimport { Book } from './book';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  BookList: Book[] = [];\n\n\n  private baseURL=\"http://localhost:8080/api/v1/books\";\n\n  // constructor(private httpClient: HttpClient) { }\n\n  constructor(private http: HttpClient) {\n  }\n\n\n  getBooksList(): Observable<Book[]>{\n    return this.httpClient.get<Book[]>(`${this.baseURL}`);\n  }\n\n  createBook(book: Book): Observable<Object>{\n    return this.httpClient.post(`${this.baseURL}`, book);\n  }\n\n  getBookById(id: number): Observable<Book>{\n    return this.httpClient.get<Book>(`${this.baseURL}/${id}`);\n  }\n\n  updateBook(id: number, book: Book): Observable<Object>{\n    return this.httpClient.put(`${this.baseURL}/${id}`, book);\n  }\n\n  deleteBook(id: number): Observable<Object>{\n    return this.httpClient.delete(`${this.baseURL}/${id}`);\n  }\n  load(filter: BookFilter): void {\n    this.find(filter).subscribe(result => {\n        this.BookList = result;\n      },\n      err => {\n        console.error('error loading', err);\n      }\n    );\n  }\n\n  find(filter: BookFilter): Observable<Book[]> {\n    const url = `http://www.angular.at/api/flight`;\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n\n    const params = {\n      'from': filter.from,\n      'to': filter.to,\n    };\n\n    return this.http.get<Flight[]>(url, {params, headers});\n  }\n\n\n  \n}\n\n\n"],"mappings":"AAKA,SAAqBA,WAAW,QAAoB,sBAAsB;;;AAO1E,OAAM,MAAOC,WAAW;EAMtB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPxB,KAAAC,QAAQ,GAAW,EAAE;IAGb,KAAAC,OAAO,GAAC,oCAAoC;EAKpD;EAGAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACC,UAAU,CAACC,GAAG,CAAS,GAAG,IAAI,CAACH,OAAO,EAAE,CAAC;EACvD;EAEAI,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAC,GAAG,IAAI,CAACN,OAAO,EAAE,EAAEK,IAAI,CAAC;EACtD;EAEAE,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACN,UAAU,CAACC,GAAG,CAAO,GAAG,IAAI,CAACH,OAAO,IAAIQ,EAAE,EAAE,CAAC;EAC3D;EAEAC,UAAUA,CAACD,EAAU,EAAEH,IAAU;IAC/B,OAAO,IAAI,CAACH,UAAU,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACV,OAAO,IAAIQ,EAAE,EAAE,EAAEH,IAAI,CAAC;EAC3D;EAEAM,UAAUA,CAACH,EAAU;IACnB,OAAO,IAAI,CAACN,UAAU,CAACU,MAAM,CAAC,GAAG,IAAI,CAACZ,OAAO,IAAIQ,EAAE,EAAE,CAAC;EACxD;EACAK,IAAIA,CAACC,MAAkB;IACrB,IAAI,CAACC,IAAI,CAACD,MAAM,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MACjC,IAAI,CAAClB,QAAQ,GAAGkB,MAAM;IACxB,CAAC,EACDC,GAAG,IAAG;MACJC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,GAAG,CAAC;IACrC,CAAC,CACF;EACH;EAEAH,IAAIA,CAACD,MAAkB;IACrB,MAAMO,GAAG,GAAG,kCAAkC;IAC9C,MAAMC,OAAO,GAAG,IAAI3B,WAAW,EAAE,CAAC4B,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IAEnE,MAAMC,MAAM,GAAG;MACb,MAAM,EAAEV,MAAM,CAACW,IAAI;MACnB,IAAI,EAAEX,MAAM,CAACY;KACd;IAED,OAAO,IAAI,CAAC5B,IAAI,CAACK,GAAG,CAAWkB,GAAG,EAAE;MAACG,MAAM;MAAEF;IAAO,CAAC,CAAC;EACxD;EAAC,QAAAK,CAAA,G;qBAnDU/B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}